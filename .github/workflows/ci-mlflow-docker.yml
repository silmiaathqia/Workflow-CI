name: "MLflow CI/CD with Docker Hub"

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
  PYTHON_VERSION: "3.12.7"

jobs:
  mlflow-training:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug - Check Repository Structure
        run: |
          echo "Repository structure:"
          find . -type f -name "*.py" -o -name "*.yml" -o -name "*.yaml" -o -name "*.csv" | head -20
          echo "Current directory contents:"
          ls -la
          echo "Looking for modelling.py:"
          find . -name "modelling.py" -type f
          echo "Looking for processed_data:"
          find . -name "processed_data" -type d

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
          channels: conda-forge,defaults
          channel-priority: flexible

      - name: Create MLProject Structure
        run: |
          echo "Creating MLProject structure..."
          mkdir -p MLProject
          
          # Copy modelling.py to MLProject if it exists in root
          if [ -f "modelling.py" ]; then
            echo "Copying modelling.py from root"
            cp modelling.py MLProject/
          else
            echo "modelling.py not found in root"
            # Check if it exists in MLProject already
            if [ ! -f "MLProject/modelling.py" ]; then
              echo "ERROR: modelling.py not found anywhere"
              exit 1
            fi
          fi
          
          # Copy processed_data to MLProject if it exists
          if [ -d "processed_data" ]; then
            echo "Copying processed_data from root"
            cp -r processed_data MLProject/
          elif [ -d "MLProject/processed_data" ]; then
            echo "processed_data already exists in MLProject"
          else
            echo "WARNING: processed_data directory not found"
            echo "Creating placeholder structure for testing"
            mkdir -p MLProject/processed_data
            echo "Note: This will cause the training to fail without real data"
          fi

      - name: Create conda.yaml file
        run: |
          cd MLProject
          echo "Creating conda.yaml"
          cat > conda.yaml << 'EOF'
          channels:
            - conda-forge
            - defaults
          dependencies:
            - python=3.12.7
            - pip<=25.1
            - numpy=1.26.4
            - pandas=2.3.0
            - scikit-learn=1.5.2
            - scipy=1.15.3
            - matplotlib=3.10.3
            - seaborn=0.13.2
            - pip:
              - mlflow==2.19.0
              - cloudpickle==3.1.1
              - psutil==7.0.0
              - dagshub==0.5.10
              - PyYAML==6.0.2
          name: mlflow-env
          EOF

      - name: Create MLproject file
        run: |
          cd MLProject
          echo "Creating MLproject file"
          cat > MLproject << 'EOF'
          name: Worker-Productivity-MLflow
          python_env: conda.yaml
          entry_points:
            main:
              command: "python modelling.py"
            train:
              parameters:
                data_path: { type: str, default: "processed_data" }
                experiment_name: { type: str, default: "Worker_Productivity_Classification_Sklearn" }
              command: "python modelling.py --data_path {data_path} --experiment_name {experiment_name}"
            build_docker:
              command: "mlflow models build-docker -m models:/WorkerProductivityMLP_Basic/latest -n worker-productivity-mlp --enable-mlserver"
          EOF

      - name: Verify MLProject Setup
        run: |
          echo "MLProject directory contents:"
          ls -la MLProject/
          echo ""
          echo "MLproject file content:"
          cat MLProject/MLproject
          echo ""
          echo "conda.yaml content:"
          cat MLProject/conda.yaml
          echo ""
          echo "Checking for modelling.py:"
          if [ -f "MLProject/modelling.py" ]; then
            echo "✓ modelling.py found"
            echo "File size: $(wc -l < MLProject/modelling.py) lines"
          else
            echo "✗ modelling.py missing"
            exit 1
          fi

      - name: Install Dependencies with Conda
        shell: bash -l {0}
        run: |
          cd MLProject
          echo "Installing dependencies with conda environment..."
          conda env create -f conda.yaml
          conda activate mlflow-env
          
          echo "Verifying installation..."
          python -c "import numpy; print('numpy version:', numpy.__version__)"
          python -c "import pandas; print('pandas version:', pandas.__version__)"
          python -c "import sklearn; print('scikit-learn version:', sklearn.__version__)"
          python -c "import matplotlib; print('matplotlib version:', matplotlib.__version__)"
          python -c "import seaborn; print('seaborn version:', seaborn.__version__)"
          python -c "import mlflow; print('mlflow version:', mlflow.__version__)"
          python -c "import dagshub; print('dagshub installed successfully')"

      - name: Configure DagsHub Authentication
        shell: bash -l {0}
        run: |
          conda activate mlflow-env
          export MLFLOW_TRACKING_URI="${{ secrets.MLFLOW_TRACKING_URI }}"
          export MLFLOW_TRACKING_USERNAME="${{ secrets.DAGSHUB_USERNAME }}" 
          export MLFLOW_TRACKING_PASSWORD="${{ secrets.DAGSHUB_USER_TOKEN }}"
          echo "DagsHub authentication configured"

      - name: Validate Data Files
        run: |
          cd MLProject
          if [ -d "processed_data" ]; then
            echo "Data directory found:"
            ls -la processed_data/
            echo ""
            echo "Checking required files:"
            required_files=("data_train.csv" "data_validation.csv" "data_test.csv")
            all_files_exist=true
            
            for file in "${required_files[@]}"; do
              if [ -f "processed_data/$file" ]; then
                echo "✓ $file exists"
                echo "  Size: $(wc -l < processed_data/$file) lines"
                # Show first line (header) only for verification
                echo "  Header: $(head -1 processed_data/$file)"
              else
                echo "✗ $file missing"
                all_files_exist=false
              fi
            done
            
            if [ "$all_files_exist" = false ]; then
              echo "ERROR: Some required data files are missing"
              exit 1
            fi
          else
            echo "ERROR: processed_data directory not found"
            exit 1
          fi

      - name: Test Python Script Compatibility
        shell: bash -l {0}
        run: |
          cd MLProject
          conda activate mlflow-env
          echo "Testing Python script compatibility..."
          python -c "
          import sys
          import os
          sys.path.append('.')
          
          try:
              # Test required imports
              import pandas as pd
              import numpy as np
              import sklearn
              import mlflow
              import dagshub
              import matplotlib
              import seaborn
              import pickle
              import json
              import warnings
              import argparse
              from pathlib import Path
              print('✓ All required packages imported successfully')
              
              # Test if functions from modelling.py can be accessed
              import importlib.util
              spec = importlib.util.spec_from_file_location('modelling', 'modelling.py')
              if spec and spec.loader:
                  modelling = importlib.util.module_from_spec(spec)
                  spec.loader.exec_module(modelling)
                  
                  # Test if main functions exist
                  required_functions = ['setup_mlflow_dagshub', 'load_processed_data', 
                                       'create_mlp_model', 'train_basic_model', 'main']
                  
                  for func_name in required_functions:
                      if hasattr(modelling, func_name):
                          print(f'✓ Function {func_name} found')
                      else:
                          print(f'✗ Function {func_name} missing')
                          sys.exit(1)
                  
                  print('✓ modelling.py structure verified')
              else:
                  print('✗ Cannot load modelling.py')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'✗ Error: {e}')
              import traceback
              traceback.print_exc()
              sys.exit(1)
          "

      - name: Run MLflow Project Training
        shell: bash -l {0}
        run: |
          cd MLProject
          conda activate mlflow-env
          echo "Running MLflow project training..."
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # Set environment variables for MLflow
          export MLFLOW_TRACKING_URI="${{ secrets.MLFLOW_TRACKING_URI }}"
          export MLFLOW_TRACKING_USERNAME="${{ secrets.DAGSHUB_USERNAME }}"
          export MLFLOW_TRACKING_PASSWORD="${{ secrets.DAGSHUB_USER_TOKEN }}"
          export DAGSHUB_USER_TOKEN="${{ secrets.DAGSHUB_USER_TOKEN }}"
          
          # First try to run with direct Python execution to avoid MLflow project issues
          echo "Attempting direct Python execution first..."
          python modelling.py --data_path "processed_data" --experiment_name "Worker_Productivity_Classification_Sklearn" --cleanup
          
          echo "✓ Direct Python execution completed"
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_USER_TOKEN }}
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}

      - name: Fallback MLflow Project Run
        if: success()
        shell: bash -l {0}
        run: |
          cd MLProject
          conda activate mlflow-env
          echo "Running MLflow project as fallback..."
          
          # Set environment variables
          export MLFLOW_TRACKING_URI="${{ secrets.MLFLOW_TRACKING_URI }}"
          export MLFLOW_TRACKING_USERNAME="${{ secrets.DAGSHUB_USERNAME }}"
          export MLFLOW_TRACKING_PASSWORD="${{ secrets.DAGSHUB_USER_TOKEN }}"
          export DAGSHUB_USER_TOKEN="${{ secrets.DAGSHUB_USER_TOKEN }}"
          
          # Try MLflow run
          mlflow run . \
            --env-manager=conda \
            --experiment-name="Worker_Productivity_Classification_Sklearn" \
            -P data_path="processed_data" \
            -P experiment_name="Worker_Productivity_Classification_Sklearn" || {
            echo "MLflow project run failed, but direct execution succeeded"
            echo "This is acceptable for CI/CD pipeline"
          }
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_USER_TOKEN }}
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}

      - name: List Generated Artifacts
        if: success()
        run: |
          echo "Generated artifacts in MLProject:"
          ls -la MLProject/
          echo ""
          echo "Generated files:"
          find MLProject/ -name "*.pkl" -o -name "*.txt" -o -name "*.json" -o -name "*.png" | head -10
          echo ""
          echo "Checking specific artifacts from modelling.py:"
          cd MLProject
          for file in "scaler_basic.pkl" "dagshub_info.json" "classification_report_basic.txt" "model_summary_basic.txt" "deployment_info_basic.json"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists ($(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown size") bytes)"
            else
              echo "✗ $file missing"
            fi
          done

      - name: Verify MLflow Experiment
        if: success()
        shell: bash -l {0}
        run: |
          cd MLProject
          conda activate mlflow-env
          echo "Checking MLflow experiment..."
          python -c "
          import mlflow
          import os
          
          # Set environment variables
          os.environ['MLFLOW_TRACKING_URI'] = '${{ secrets.MLFLOW_TRACKING_URI }}'
          os.environ['MLFLOW_TRACKING_USERNAME'] = '${{ secrets.DAGSHUB_USERNAME }}'
          os.environ['MLFLOW_TRACKING_PASSWORD'] = '${{ secrets.DAGSHUB_USER_TOKEN }}'
          
          mlflow.set_tracking_uri('${{ secrets.MLFLOW_TRACKING_URI }}')
          
          try:
              # Get experiment
              experiment = mlflow.get_experiment_by_name('Worker_Productivity_Classification_Sklearn')
              if experiment:
                  print(f'✓ Experiment found: {experiment.name}')
                  runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id], 
                                          order_by=['start_time DESC'], 
                                          max_results=5)
                  print(f'✓ Total runs: {len(runs)}')
                  
                  if not runs.empty:
                      latest_run = runs.iloc[0]
                      run_id = latest_run['run_id']
                      print(f'✓ Latest run ID: {run_id}')
                      
                      # Check for registered models
                      try:
                          client = mlflow.MlflowClient()
                          models = client.search_registered_models()
                          productivity_models = [m for m in models if 'WorkerProductivityMLP_Basic' in m.name]
                          if productivity_models:
                              print(f'✓ Registered model found: {productivity_models[0].name}')
                          else:
                              print('! No registered models found (this is OK)')
                      except Exception as model_e:
                          print(f'! Model check error: {model_e}')
                  else:
                      print('! No runs found in experiment')
              else:
                  print('✗ Experiment not found')
          except Exception as e:
              print(f'✗ Error checking experiment: {e}')
          "

      - name: Setup Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        if: success()
        run: |
          cd MLProject
          echo "Building Docker image..."

          # Create Dockerfile for the application
          cat > Dockerfile << 'EOF'
          FROM python:3.12.7-slim

          WORKDIR /app

          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              gcc \
              g++ \
              && rm -rf /var/lib/apt/lists/*

          # Copy conda.yaml and install dependencies
          COPY conda.yaml .
          RUN pip install --no-cache-dir \
              mlflow==2.19.0 \
              cloudpickle==3.1.1 \
              numpy==1.26.4 \
              pandas==2.3.0 \
              psutil==7.0.0 \
              scikit-learn==1.5.2 \
              scipy==1.15.3 \
              matplotlib==3.10.3 \
              seaborn==0.13.2 \
              dagshub==0.5.10 \
              PyYAML==6.0.2

          # Copy application files
          COPY . .

          # Create non-root user
          RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
          USER appuser

          # Expose port
          EXPOSE 8080

          # Default command
          CMD ["python", "modelling.py", "--data_path", "processed_data", "--experiment_name", "Worker_Productivity_Classification_Sklearn"]
          EOF

          # Build Docker image
          echo "Building Docker image: ${{ secrets.DOCKER_REPO }}"
          docker build -t ${{ secrets.DOCKER_REPO }} .
          
          echo "✓ Docker image built successfully"

      - name: Push Docker Image to Hub
        if: success()
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker push ${{ secrets.DOCKER_REPO }}
          echo "✓ Docker image pushed successfully"
          echo "Image available at: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}"

      - name: Upload Artifacts to Repository
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts
          path: |
            MLProject/*.txt
            MLProject/*.json
            MLProject/*.pkl
            MLProject/*.yaml
            MLProject/*.png
            MLProject/Dockerfile
          retention-days: 30

      - name: Create Release with Artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: model-${{ github.run_number }}
          name: Model Release ${{ github.run_number }}
          body: |
            ## Automated Model Training Release

            ### Training Results:
            - ✅ MLflow Project executed successfully
            - ✅ Docker image built and pushed to Docker Hub
            - ✅ All artifacts saved and available for download

            ### Docker Image:
            ```bash
            docker pull ${{ secrets.DOCKER_REPO }}
            ```
            
            ### Artifacts included:
            - 📁 Model files (*.pkl)
            - 📊 Training reports (*.txt)
            - ⚙️ Configuration files (*.json, *.yaml)
            - 📈 Visualizations (*.png)
            - 🐳 Dockerfile
              
            ### Links:
            - **MLflow Tracking**: ${{ secrets.MLFLOW_TRACKING_URI }}
            - **Docker Hub**: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            
            ### Model Information:
            - **Model Type**: Basic MLP Classifier (scikit-learn)
            - **Architecture**: (128, 64, 32) hidden layers
            - **Target**: Worker Productivity Classification
            - **Classes**: High, Low, Medium
          files: |
            MLProject/*.txt
            MLProject/*.json
            MLProject/*.pkl
            MLProject/*.yaml
            MLProject/Dockerfile
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          docker system prune -f || true
          echo "✓ Cleanup completed"

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "========================================"
          echo "           CI/CD Pipeline Summary       "
          echo "========================================"
          echo "Pipeline status: ${{ job.status }}"
          echo ""
          echo "Steps completed:"
          echo "  - Repository checkout: ✓"
          echo "  - MLProject setup: ✓"
          echo "  - Data validation: ${{ steps.validate-data-files.outcome == 'success' && '✓' || '⚠️' }}"
          echo "  - Model training: ${{ steps.run-mlflow-project-training.outcome == 'success' && '✓' || '⚠️' }}"
          echo "  - Docker build: ${{ steps.build-docker-image.outcome == 'success' && '✓' || '⚠️' }}"
          echo "  - Docker push: ${{ steps.push-docker-image-to-hub.outcome == 'success' && '✓' || '⚠️' }}"
          echo "  - Artifacts upload: ✓"
          echo "  - Release creation: ${{ steps.create-release-with-artifacts.outcome == 'success' && '✓' || '⚠️' }}"
          echo ""
          echo "Links:"
          echo "  - Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}"
          echo "  - MLflow: ${{ secrets.MLFLOW_TRACKING_URI }}"
          echo "  - Repository: ${{ github.server_url }}/${{ github.repository }}"
          echo "========================================"
